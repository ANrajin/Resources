version: "3.9"
services:
  nginx:
    image: nginx:alpine
    container_name: laralab-nginx
    restart: unless-stopped
    ports:
      - 8080:80
    volumes:
      #put all the files and folder from root directory, into /var/www/html directory of nginx server and cache it
      - ./:/var/www/html:cached
      #put the config files defined in .docker/nginx folder into nginx servers /etc/ngnix/conf.d folder
      - ./.docker/nginx:/etc/nginx/conf.d
      #put the local ssl files generated by mkcert into /etc/nginx/conf.d/ssl folder of nginx server
      - ./.docker/nginx/ssl:/etc/nginx/conf.d/ssl
    depends_on:
      - app
    networks:
      - laralab-network

  app:
    build:
      #load the Dockerfile from <.docker/php> directory
      context: ./.docker/php
      #Dockerfile will contain all the instruction required for our application
      dockerfile: Dockerfile
    container_name: laralab-app
    restart: unless-stopped
    volumes:
      #copy all the file's and folder's of my root directory into container
      - ./:/var/www/html:cached
      #copy my custom configuration for php, into container
      - ./.docker/php/php-fpm.ini:/usr/local/etc/php/conf.d/custom.ini
      #this will copy my local ssh keys into containers ssh folder
      #so that we can clone git repo using SSH
      - ~/.ssh:/root/.ssh
    depends_on:
      - mariadb
      - redis
    networks:
      - laralab-network
  
  mariadb:
    image: mariadb:latest
    container_name: laralab-db
    restart: unless-stopped
    ports:
      - 3306:3306
    volumes:
      - ./data/mysql:/var/lib/mysql
    environment:
      - MYSQL_USER=root
      - MYSQL_ROOT_PASSWORD=laralab
      - MYSQL_DATABASE=laralab
      - MYSQL_PASSWORD=laralab
    networks:
      - laralab-network

  redis:
    image: redis:alpine
    container_name: laralab-radis
    volumes:
      - ./data/redis:/data
    ports:
      - 6379:6379
    networks:
      - laralab-network

#all services defined in docker-compose file will stay under this network, so that they can communicate
networks:
  laralab-network:
    driver: bridge

volumes:
  laralab-volume:
    driver: local
